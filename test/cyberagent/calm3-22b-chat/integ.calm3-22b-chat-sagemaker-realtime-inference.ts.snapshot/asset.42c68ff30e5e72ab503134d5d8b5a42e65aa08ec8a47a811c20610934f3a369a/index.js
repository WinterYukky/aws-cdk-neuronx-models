"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isComplete = exports.onCreate = exports.onEvent = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const client_batch_1 = require("@aws-sdk/client-batch");
const client = new client_batch_1.BatchClient({
    region: process.env.AWS_DEFAULT_REGION,
});
const onEvent = async (event, _context, _callback) => {
    console.log(event);
    switch (event.RequestType) {
        case "Create":
        case "Update":
            return (0, exports.onCreate)(event, _context, _callback);
        case "Delete":
            return {};
    }
};
exports.onEvent = onEvent;
const onCreate = async (event) => {
    console.log(event);
    const now = new Date();
    const job = await client.send(new client_batch_1.SubmitJobCommand({
        jobName: `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}-${now.getHours()}-${now.getMinutes()}-${now.getSeconds()}`,
        jobDefinition: event.ResourceProperties.jobDefinitionArn,
        jobQueue: event.ResourceProperties.jobQueueArn,
    }));
    return {
        jobId: job.jobId,
    };
};
exports.onCreate = onCreate;
const isComplete = async (event) => {
    if (event.RequestType === "Delete") {
        return {
            IsComplete: true,
        };
    }
    const jobs = await client.send(new client_batch_1.DescribeJobsCommand({
        jobs: [event.jobId],
    }));
    const job = jobs.jobs?.[0];
    if (!job) {
        throw new Error(`Job (${event.jobId}) is missing`);
    }
    switch (job.status) {
        case "SUCCEEDED":
            return {
                IsComplete: true,
                Data: {
                    ArtifactS3Prefix: event.ResourceProperties.artifactS3Prefix,
                },
            };
        case "FAILED":
            throw new Error(job.statusReason);
    }
    return {
        IsComplete: false,
    };
};
exports.isComplete = isComplete;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJpdmF0ZS9hd2FpdC1jb21waWxlLWpvYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBNkQ7QUFDN0Qsd0RBSStCO0FBTS9CLE1BQU0sTUFBTSxHQUFHLElBQUksMEJBQVcsQ0FBQztJQUM3QixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDdkMsQ0FBQyxDQUFDO0FBQ0ksTUFBTSxPQUFPLEdBQTZCLEtBQUssRUFDcEQsS0FBSyxFQUNMLFFBQVEsRUFDUixTQUFTLEVBQ1QsRUFBRTtJQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsUUFBUSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUIsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLFFBQVE7WUFDWCxPQUFPLElBQUEsZ0JBQVEsRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBRSxDQUFDO1FBQy9DLEtBQUssUUFBUTtZQUNYLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUMsQ0FBQztBQWJXLFFBQUEsT0FBTyxXQWFsQjtBQUNLLE1BQU0sUUFBUSxHQUE2QixLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FDM0IsSUFBSSwrQkFBZ0IsQ0FBQztRQUNuQixPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUU7UUFDaEksYUFBYSxFQUFFLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0I7UUFDeEQsUUFBUSxFQUFFLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXO0tBQy9DLENBQUMsQ0FDSCxDQUFDO0lBQ0YsT0FBTztRQUNMLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztLQUNqQixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBYlcsUUFBQSxRQUFRLFlBYW5CO0FBRUssTUFBTSxVQUFVLEdBQXVDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtJQUM1RSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDbkMsT0FBTztZQUNMLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUM1QixJQUFJLGtDQUFtQixDQUFDO1FBQ3RCLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7S0FDcEIsQ0FBQyxDQUNILENBQUM7SUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxLQUFLLGNBQWMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDRCxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNuQixLQUFLLFdBQVc7WUFDZCxPQUFPO2dCQUNMLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixJQUFJLEVBQUU7b0JBQ0osZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQjtpQkFDNUQ7YUFDRixDQUFDO1FBQ0osS0FBSyxRQUFRO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNELE9BQU87UUFDTCxVQUFVLEVBQUUsS0FBSztLQUNsQixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBN0JXLFFBQUEsVUFBVSxjQTZCckIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQge1xuICBCYXRjaENsaWVudCxcbiAgRGVzY3JpYmVKb2JzQ29tbWFuZCxcbiAgU3VibWl0Sm9iQ29tbWFuZCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1iYXRjaFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBDZGtDdXN0b21SZXNvdXJjZUhhbmRsZXIsXG4gIHR5cGUgQ2RrQ3VzdG9tUmVzb3VyY2VJc0NvbXBsZXRlSGFuZGxlcixcbn0gZnJvbSBcImF3cy1sYW1iZGFcIjtcblxuY29uc3QgY2xpZW50ID0gbmV3IEJhdGNoQ2xpZW50KHtcbiAgcmVnaW9uOiBwcm9jZXNzLmVudi5BV1NfREVGQVVMVF9SRUdJT04sXG59KTtcbmV4cG9ydCBjb25zdCBvbkV2ZW50OiBDZGtDdXN0b21SZXNvdXJjZUhhbmRsZXIgPSBhc3luYyAoXG4gIGV2ZW50LFxuICBfY29udGV4dCxcbiAgX2NhbGxiYWNrLFxuKSA9PiB7XG4gIGNvbnNvbGUubG9nKGV2ZW50KTtcbiAgc3dpdGNoIChldmVudC5SZXF1ZXN0VHlwZSkge1xuICAgIGNhc2UgXCJDcmVhdGVcIjpcbiAgICBjYXNlIFwiVXBkYXRlXCI6XG4gICAgICByZXR1cm4gb25DcmVhdGUoZXZlbnQsIF9jb250ZXh0LCBfY2FsbGJhY2spITtcbiAgICBjYXNlIFwiRGVsZXRlXCI6XG4gICAgICByZXR1cm4ge307XG4gIH1cbn07XG5leHBvcnQgY29uc3Qgb25DcmVhdGU6IENka0N1c3RvbVJlc291cmNlSGFuZGxlciA9IGFzeW5jIChldmVudCkgPT4ge1xuICBjb25zb2xlLmxvZyhldmVudCk7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGpvYiA9IGF3YWl0IGNsaWVudC5zZW5kKFxuICAgIG5ldyBTdWJtaXRKb2JDb21tYW5kKHtcbiAgICAgIGpvYk5hbWU6IGAke25vdy5nZXRGdWxsWWVhcigpfS0ke25vdy5nZXRNb250aCgpICsgMX0tJHtub3cuZ2V0RGF0ZSgpfS0ke25vdy5nZXRIb3VycygpfS0ke25vdy5nZXRNaW51dGVzKCl9LSR7bm93LmdldFNlY29uZHMoKX1gLFxuICAgICAgam9iRGVmaW5pdGlvbjogZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzLmpvYkRlZmluaXRpb25Bcm4sXG4gICAgICBqb2JRdWV1ZTogZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzLmpvYlF1ZXVlQXJuLFxuICAgIH0pLFxuICApO1xuICByZXR1cm4ge1xuICAgIGpvYklkOiBqb2Iuam9iSWQsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgaXNDb21wbGV0ZTogQ2RrQ3VzdG9tUmVzb3VyY2VJc0NvbXBsZXRlSGFuZGxlciA9IGFzeW5jIChldmVudCkgPT4ge1xuICBpZiAoZXZlbnQuUmVxdWVzdFR5cGUgPT09IFwiRGVsZXRlXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgSXNDb21wbGV0ZTogdHJ1ZSxcbiAgICB9O1xuICB9XG4gIGNvbnN0IGpvYnMgPSBhd2FpdCBjbGllbnQuc2VuZChcbiAgICBuZXcgRGVzY3JpYmVKb2JzQ29tbWFuZCh7XG4gICAgICBqb2JzOiBbZXZlbnQuam9iSWRdLFxuICAgIH0pLFxuICApO1xuICBjb25zdCBqb2IgPSBqb2JzLmpvYnM/LlswXTtcbiAgaWYgKCFqb2IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEpvYiAoJHtldmVudC5qb2JJZH0pIGlzIG1pc3NpbmdgKTtcbiAgfVxuICBzd2l0Y2ggKGpvYi5zdGF0dXMpIHtcbiAgICBjYXNlIFwiU1VDQ0VFREVEXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBJc0NvbXBsZXRlOiB0cnVlLFxuICAgICAgICBEYXRhOiB7XG4gICAgICAgICAgQXJ0aWZhY3RTM1ByZWZpeDogZXZlbnQuUmVzb3VyY2VQcm9wZXJ0aWVzLmFydGlmYWN0UzNQcmVmaXgsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGNhc2UgXCJGQUlMRURcIjpcbiAgICAgIHRocm93IG5ldyBFcnJvcihqb2Iuc3RhdHVzUmVhc29uKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIElzQ29tcGxldGU6IGZhbHNlLFxuICB9O1xufTtcbiJdfQ==